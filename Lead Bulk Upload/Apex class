public class CsvFileLightningController 
{
	@AuraEnabled
    public static wrapperclass processData(String fileData,String sobjectName,List<String> fields) 
    {
		OpportunityLineItem objOppLineItem = new OpportunityLineItem();
        wrapperclass wrp = new wrapperclass();
        System.debug('fileData:::'+filedata);
        System.debug('sobjectName:::'+sobjectName);
        System.debug('fields:::'+fields);
        Schema.SObjectType targetType = Schema.getGlobalDescribe().get(sobjectName);
        try
        {
            if(fileData!=null)
            { 
                String[] fileLines = new String[]{};
                fileLines = fileData.split('\n');
                List<sObject> myList = new List<sObject>();
                //set<string> setPostalcode = new set<string>();
                //map<string,string> mapcity = new map<string,string>();
                                
                for (Integer i=1,j=fileLines.size();i<j;i++)
                {
                    String[] inputvalues = new String[]{};
                    inputvalues = fileLines[i].split(',');
                    sObject obj = targetType.newSObject();
                    integer rowsize=inputvalues.size();
                    for(integer l=0;l<rowsize;l++)
                    {
                        system.debug('fields.get(l)'+fields.get(l)); 
                        if(String.isNotBlank(inputvalues[l]) )
                        {
                            String value= inputvalues[l].length()>255 ? inputvalues[l].substring(0,254) : inputvalues[l];
                            obj.put(fields.get(l),value);
                            system.debug('--obj--'+obj);
                        }
                        else{
                            system.debug('---zddbz----'+fields.get(l));
                            obj.put(fields.get(l),'');
                        }
                    }
                    myList.add(obj);
                }
                if(myList.size() > 0)
                {
                    Database.SaveResult[] result = Database.insert(myList,false);
                    for(Integer i=0; i < result.size(); i++) 
                    {
                        if(result.get(i).isSuccess()) 
                        {
                            wrp.recCount = wrp.recCount+1;
                        } 
                        else if(!result.get(i).isSuccess()) 
                        {
                            System.debug('---myList---'+myList.get(i));
                            Database.Error errors =  result.get(i).getErrors().get(0);
                            wrp.lstLead.add(myList.get(i));
                            wrp.recErrorCount = wrp.recErrorCount+1;
                            wrp.lsterrorMsg.add(errors.getMessage());
                            System.debug('Error Occurs While Processing The Record'+errors.getMessage());
                            System.debug('Failure Record Ids While Updating'+result.get(i));
                        }
                    }
                }
            }
        }catch(Exception e)
        {
            System.debug('exception'+e);   
        }
        return Wrp;
    }
    public class wrapperclass
    {
        @auraenabled public list<sObject> lstLead{get;set;}
        @auraenabled public list<string> lsterrorMsg{get;set;}
        @auraenabled public integer recCount{get;set;}
        @auraenabled public integer recErrorCount{get;set;}
        public wrapperclass()
        {
            recCount = 0;
            recErrorCount = 0;
            lsterrorMsg=new list<string>();
            lstLead = new list<sObject>();
        }
    }
}